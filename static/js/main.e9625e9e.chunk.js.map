{"version":3,"sources":["hub/ControlPanel/Slider.tsx","hub/config/initData.tsx","hub/p5/SketchWrapper.tsx","hub/App.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Slider","props","onSliderChange","event","sliderValue","target","value","setState","callback","state","data","initialValue","className","this","style","div","divClass","width","divWidth","text","type","min","bounds","MIN","max","MAX","step","STEP","slider","sliderWidth","maxWidth","sliderMaxWidth","onChange","React","Component","sliderData","funcs","sketchWindowConfig","window","innerWidth","height","innerHeight","sketchConfig","init","SketchWrapper","ref","canvas","Sketch","p","high","setup","createCanvas","background","stroke","strokeWeight","frameRate","draw","x","mouseX","y","mouseY","i","point","random","createRef","p5","current","App","n","numOfPoints","console","log","getSketchData","result","initData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9625e9e.chunk.js","sourcesContent":["import React from 'react'\n\nimport {IsliderProps, IsliderState} from '../config/definitions';\n\nexport default class Slider extends React.Component<IsliderProps, IsliderState>{\n\tconstructor(props: IsliderProps){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvalue: this.props.data.initialValue\n\t\t};\n\t}\n\n\tonSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst sliderValue = +event.target.value;\n\t\tthis.setState({\n            value: sliderValue\n        });\n        this.props.callback(sliderValue);\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className={this.props.style.div.divClass} style={{width: this.props.style.div.divWidth}}>\n\t\t\t\t{this.props.data.text + this.state.value}\n\t\t\t\t<br/>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin={this.props.data.bounds.MIN}\n\t\t\t\t\tmax={this.props.data.bounds.MAX}\n\t\t\t\t\tstep={this.props.data.bounds.STEP}\n\t\t\t\t\tvalue={this.state.value}\n\t\t\t\t\tstyle={{width: this.props.style.slider.sliderWidth, maxWidth: this.props.style.slider.sliderMaxWidth}}\n\t\t\t\t\tonChange={this.onSliderChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}","export default {\n    sliderData : {\n        data:{\n            initialValue: 50,\n            text: \"Number of points per frame: \",\n            bounds: {\n                MIN: 1,\n                MAX: 500,\n                STEP: 1\n            }\n        },\n        style:{\n            div: {\n                divClass: \"\",\n                divWidth: '50%'\n            },\n            slider: {\n                sliderWidth: '90%',\n                sliderMaxWidth: '900px'\n            }\n        },\n        funcs:{\n        }\n    },\n\n    sketchWindowConfig: {\n        width: (window.innerWidth*.5),\n        height: window.innerHeight\n    },\n\n    sketchConfig: {\n        init:{\n            initialValue: 50\n        },\n        window:{\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n    }\n}","import React from 'react';\nimport p5 from 'p5';\n\nimport {IsketchProps} from '../config/definitions'\n\nexport default class SketchWrapper extends React.Component<IsketchProps>{\n    ref: any;\n    canvas: p5 | null;\n    \n    constructor(props: IsketchProps){\n        super(props);\n        this.canvas = null;\n        this.ref = React.createRef();\n    }\n\n    Sketch = (p: p5) => {\n        let high = 0;\n        p.setup = () => {\n            p.createCanvas(this.props.window.width, this.props.window.height);\n            p.background(\"\");\n            p.stroke(0);\n            p.strokeWeight(5);\n            p.frameRate(2);\n        }\n        function isOnScreen(x: number, y: number) {\n            return x > 0 && x < p.width && y > 0 && y < p.height;\n        }\n        p.draw = () => {\n            if(isOnScreen(p.mouseX, p.mouseY))\n                for(let i:number = 0; i<this.props.init.initialValue; i++){\n                    p.point(p.random()*p.width, p.random()*p.height);\n                    high++;\n                }\n            this.props.callback(high);\n        }\n    }\n\n    componentDidMount(){\n        this.canvas = new p5(this.Sketch, this.ref.current);\n    }\n\n    render(){\n        return (\n            <div ref={this.ref}>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport Slider from './ControlPanel/Slider'\nimport './App.css'\n\nimport initData from './config/initData'\nimport Sketch from './p5/SketchWrapper';\n\nimport {IappState} from './config/definitions'\n\nexport default class App extends React.Component<{}, IappState>{\n\t\n\tconstructor(props: any){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnumOfPoints: initData.sliderData.data.initialValue,\n\t\t\tresult: 0\n\t\t}\n\t}\n\t\n\tonSliderChange = (n: number) => {\n\t\tthis.setState({\n\t\t\tnumOfPoints: n\n\t\t});\n\t\tconsole.log(n)\n\t}\n\t\n\tgetSketchData = (n: number) => {\n\t\tthis.setState({\n\t\t\tresult: n\n\t\t});\n\t\tconsole.log(n);\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className='main-container'>\n\t\t\t\t<div style={{width:'50%'}}>\n\t\t\t\t\t<Sketch {...\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinit:{\n\t\t\t\t\t\t\t\tinitialValue: this.state.numOfPoints\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\twindow: initData.sketchWindowConfig,\n\t\t\t\t\t\t\tcallback: this.getSketchData\n\t\t\t\t\t\t}\n\t\t\t\t\t} />\n\t\t\t\t\t{/* <strong>{this.state.numOfPoints}</strong>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<h1>{\"help\"}</h1> */}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div className='App-header' style={{width:'50%'}}>\n\t\t\t\t\t<strong>Total points: {this.state.result}</strong>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<strong>CONTROL PANEL</strong>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<Slider {...\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdata:initData.sliderData.data,\n\t\t\t\t\t\t\tstyle:initData.sliderData.style,\n\t\t\t\t\t\t\tcallback:this.onSliderChange\n\t\t\t\t\t\t}\n\t\t\t\t\t}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t);\n\t}\n}","import './App.css';\nimport Hub from './hub/App';\n\nfunction App() {\n  return (\n    <Hub />\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}